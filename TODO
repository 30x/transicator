# Changes necessary for new data model:

New API for changeserver:
  Given {xmin, xmax, xip...}, return the commit sequence that matches.
  This will probably require another index in LDB.
  Greg can also work on this.

Check out the work on storing sequence numbers so that it takes
indices into consideration.

Add an API call that takes a set of TXIDs from the current snapshot, and
returns the sequence of the LAST change that was in that snapshot. We can then
start retrieving changes using that value as the "since". Do this using
a linear scan of the various scopes. Some day we might be able to use an
index or timestamp to make this faster.

# Other changes

Consider what happens for a big transaction -- Postgres will return us
many records, each with the same commit sequence, and different values
of "index." Should the "/changes" API always return them all, even if
"limit" is exceeded? It might simplify things.

# Lower Priority

SSL to Postgres server using PG's weird SSL techique. (Greg can do that.)

Add basic authentication to the API. (Greg has code for that.)

Complete the health check mechanism so that a load balancer can mark the server
down for a zero-downtime replacement. (Greg can do that.)

Docker image and repo for building it on Docker Hub.

Deployment to E2E Kubernetes.

Support the "Comet" technique or even WebSockets in addition to long polling.

Investigate binary support for the change log from PG to LevelDB.
